// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package sqlcgen

import (
	"context"
)

const checkProjectName = `-- name: CheckProjectName :one
SELECT COUNT(*) FROM project
WHERE teamid = ? and title=? LIMIT 1
`

type CheckProjectNameParams struct {
	Teamid int64  `json:"teamid"`
	Title  string `json:"title"`
}

func (q *Queries) CheckProjectName(ctx context.Context, arg CheckProjectNameParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkProjectName, arg.Teamid, arg.Title)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteTeamPermission = `-- name: DeleteTeamPermission :one
DELETE FROM teampermission
WHERE userid = ?
RETURNING userid, teamid, level
`

func (q *Queries) DeleteTeamPermission(ctx context.Context, userid string) (Teampermission, error) {
	row := q.db.QueryRowContext(ctx, deleteTeamPermission, userid)
	var i Teampermission
	err := row.Scan(&i.Userid, &i.Teamid, &i.Level)
	return i, err
}

const findHash = `-- name: FindHash :one
SELECT hash, s3key, size FROM block
WHERE hash = ?
LIMIT 1
`

func (q *Queries) FindHash(ctx context.Context, hash string) (Block, error) {
	row := q.db.QueryRowContext(ctx, findHash, hash)
	var i Block
	err := row.Scan(&i.Hash, &i.S3key, &i.Size)
	return i, err
}

const findProjectInitCommit = `-- name: FindProjectInitCommit :one
SELECT commitid FROM 'commit'
WHERE projectid = ?
ORDER BY commitid ASC LIMIT 1
`

func (q *Queries) FindProjectInitCommit(ctx context.Context, projectid int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, findProjectInitCommit, projectid)
	var commitid int64
	err := row.Scan(&commitid)
	return commitid, err
}

const findProjectPermissions = `-- name: FindProjectPermissions :many
SELECT level FROM projectpermission
WHERE userid = ?
`

func (q *Queries) FindProjectPermissions(ctx context.Context, userid string) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, findProjectPermissions, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var level int64
		if err := rows.Scan(&level); err != nil {
			return nil, err
		}
		items = append(items, level)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findTeamPermissions = `-- name: FindTeamPermissions :many
SELECT level FROM teampermission
WHERE userid = ?
`

func (q *Queries) FindTeamPermissions(ctx context.Context, userid string) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, findTeamPermissions, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var level int64
		if err := rows.Scan(&level); err != nil {
			return nil, err
		}
		items = append(items, level)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findUserManagedTeams = `-- name: FindUserManagedTeams :many
SELECT DISTINCT team.teamid, name FROM team INNER JOIN teampermission as tp ON team.teamid = tp.teamid
WHERE tp.userid = ? AND tp.level >= 2
`

type FindUserManagedTeamsRow struct {
	Teamid int64  `json:"teamid"`
	Name   string `json:"name"`
}

func (q *Queries) FindUserManagedTeams(ctx context.Context, userid string) ([]FindUserManagedTeamsRow, error) {
	rows, err := q.db.QueryContext(ctx, findUserManagedTeams, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindUserManagedTeamsRow
	for rows.Next() {
		var i FindUserManagedTeamsRow
		if err := rows.Scan(&i.Teamid, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findUserProjects = `-- name: FindUserProjects :many
SELECT projectid, title, name FROM project INNER JOIN team ON team.teamid = project.teamid
WHERE project.teamid = ?
`

type FindUserProjectsRow struct {
	Projectid int64  `json:"projectid"`
	Title     string `json:"title"`
	Name      string `json:"name"`
}

func (q *Queries) FindUserProjects(ctx context.Context, teamid int64) ([]FindUserProjectsRow, error) {
	rows, err := q.db.QueryContext(ctx, findUserProjects, teamid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindUserProjectsRow
	for rows.Next() {
		var i FindUserProjectsRow
		if err := rows.Scan(&i.Projectid, &i.Title, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findUserTeams = `-- name: FindUserTeams :many
SELECT DISTINCT team.teamid, name FROM team INNER JOIN teampermission AS tp ON team.teamid = tp.teamid
WHERE tp.userid = ?
`

type FindUserTeamsRow struct {
	Teamid int64  `json:"teamid"`
	Name   string `json:"name"`
}

func (q *Queries) FindUserTeams(ctx context.Context, userid string) ([]FindUserTeamsRow, error) {
	rows, err := q.db.QueryContext(ctx, findUserTeams, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindUserTeamsRow
	for rows.Next() {
		var i FindUserTeamsRow
		if err := rows.Scan(&i.Teamid, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHash = `-- name: GetHash :one
SELECT hash FROM filerevision
WHERE projectid = ? AND path = ? AND commitid = ? LIMIT 1
`

type GetHashParams struct {
	Projectid int64  `json:"projectid"`
	Path      string `json:"path"`
	Commitid  int64  `json:"commitid"`
}

func (q *Queries) GetHash(ctx context.Context, arg GetHashParams) (string, error) {
	row := q.db.QueryRowContext(ctx, getHash, arg.Projectid, arg.Path, arg.Commitid)
	var hash string
	err := row.Scan(&hash)
	return hash, err
}

const getLatestCommit = `-- name: GetLatestCommit :one
SELECT MAX(commitid) FROM 'commit'
WHERE projectid = ? LIMIT 1
`

func (q *Queries) GetLatestCommit(ctx context.Context, projectid int64) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, getLatestCommit, projectid)
	var max interface{}
	err := row.Scan(&max)
	return max, err
}

const getProjectInfo = `-- name: GetProjectInfo :one
SELECT title FROM project
WHERE projectid = ? LIMIT 1
`

func (q *Queries) GetProjectInfo(ctx context.Context, projectid int64) (string, error) {
	row := q.db.QueryRowContext(ctx, getProjectInfo, projectid)
	var title string
	err := row.Scan(&title)
	return title, err
}

const getProjectLivingFiles = `-- name: GetProjectLivingFiles :many
SELECT a.frid, a.path FROM filerevision a
INNER JOIN ( SELECT path, MAX(frid) frid FROM filerevision GROUP BY path ) b
ON a.path = b.path AND a.frid = b.frid
WHERE a.projectid = ? and changetype != 3
`

type GetProjectLivingFilesRow struct {
	Frid int64  `json:"frid"`
	Path string `json:"path"`
}

func (q *Queries) GetProjectLivingFiles(ctx context.Context, projectid int64) ([]GetProjectLivingFilesRow, error) {
	rows, err := q.db.QueryContext(ctx, getProjectLivingFiles, projectid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProjectLivingFilesRow
	for rows.Next() {
		var i GetProjectLivingFilesRow
		if err := rows.Scan(&i.Frid, &i.Path); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProjectPermission = `-- name: GetProjectPermission :one
SELECT level FROM projectpermission
WHERE userid = ? AND projectid = ? LIMIT 1
`

type GetProjectPermissionParams struct {
	Userid    string `json:"userid"`
	Projectid int64  `json:"projectid"`
}

func (q *Queries) GetProjectPermission(ctx context.Context, arg GetProjectPermissionParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getProjectPermission, arg.Userid, arg.Projectid)
	var level int64
	err := row.Scan(&level)
	return level, err
}

const getProjectState = `-- name: GetProjectState :many
SELECT a.frid, a.path, a.commitid, a.hash, a.changetype FROM filerevision a
INNER JOIN ( SELECT path, MAX(frid) frid FROM filerevision GROUP BY path ) b
ON a.path = b.path AND a.frid = b.frid
WHERE a.projectid = ?
`

type GetProjectStateRow struct {
	Frid       int64  `json:"frid"`
	Path       string `json:"path"`
	Commitid   int64  `json:"commitid"`
	Hash       string `json:"hash"`
	Changetype int64  `json:"changetype"`
}

func (q *Queries) GetProjectState(ctx context.Context, projectid int64) ([]GetProjectStateRow, error) {
	rows, err := q.db.QueryContext(ctx, getProjectState, projectid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProjectStateRow
	for rows.Next() {
		var i GetProjectStateRow
		if err := rows.Scan(
			&i.Frid,
			&i.Path,
			&i.Commitid,
			&i.Hash,
			&i.Changetype,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getS3Key = `-- name: GetS3Key :one
SELECT s3key FROM block
WHERE hash = ? LIMIT 1
`

func (q *Queries) GetS3Key(ctx context.Context, hash string) (string, error) {
	row := q.db.QueryRowContext(ctx, getS3Key, hash)
	var s3key string
	err := row.Scan(&s3key)
	return s3key, err
}

const getTeamByProject = `-- name: GetTeamByProject :one
SELECT teamid FROM project
WHERE projectid = ? LIMIT 1
`

func (q *Queries) GetTeamByProject(ctx context.Context, projectid int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getTeamByProject, projectid)
	var teamid int64
	err := row.Scan(&teamid)
	return teamid, err
}

const getTeamFromProject = `-- name: GetTeamFromProject :one
SELECT teamid FROM project
WHERE projectid = ? LIMIT 1
`

func (q *Queries) GetTeamFromProject(ctx context.Context, projectid int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getTeamFromProject, projectid)
	var teamid int64
	err := row.Scan(&teamid)
	return teamid, err
}

const getTeamMembership = `-- name: GetTeamMembership :many
SELECT userid, level FROM teampermission
WHERE teamid = ?
`

type GetTeamMembershipRow struct {
	Userid string `json:"userid"`
	Level  int64  `json:"level"`
}

func (q *Queries) GetTeamMembership(ctx context.Context, teamid int64) ([]GetTeamMembershipRow, error) {
	rows, err := q.db.QueryContext(ctx, getTeamMembership, teamid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTeamMembershipRow
	for rows.Next() {
		var i GetTeamMembershipRow
		if err := rows.Scan(&i.Userid, &i.Level); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeamName = `-- name: GetTeamName :one
SELECT name FROM team
WHERE teamid = ? LIMIT 1
`

func (q *Queries) GetTeamName(ctx context.Context, teamid int64) (string, error) {
	row := q.db.QueryRowContext(ctx, getTeamName, teamid)
	var name string
	err := row.Scan(&name)
	return name, err
}

const getTeamPermission = `-- name: GetTeamPermission :one
SELECT level FROM teampermission
WHERE teamid = ? AND userid = ?
LIMIT 1
`

type GetTeamPermissionParams struct {
	Teamid int64  `json:"teamid"`
	Userid string `json:"userid"`
}

func (q *Queries) GetTeamPermission(ctx context.Context, arg GetTeamPermissionParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getTeamPermission, arg.Teamid, arg.Userid)
	var level int64
	err := row.Scan(&level)
	return level, err
}

const getUploadPermission = `-- name: GetUploadPermission :one
SELECT COUNT(*) FROM teampermission
WHERE userid = ? LIMIT 1
`

func (q *Queries) GetUploadPermission(ctx context.Context, userid string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUploadPermission, userid)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const insertCommit = `-- name: InsertCommit :one
INSERT INTO 'commit'(projectid, userid, comment, numfiles)
VALUES (?, ?, ?, ?)
RETURNING commitid
`

type InsertCommitParams struct {
	Projectid int64       `json:"projectid"`
	Userid    string      `json:"userid"`
	Comment   interface{} `json:"comment"`
	Numfiles  int64       `json:"numfiles"`
}

func (q *Queries) InsertCommit(ctx context.Context, arg InsertCommitParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertCommit,
		arg.Projectid,
		arg.Userid,
		arg.Comment,
		arg.Numfiles,
	)
	var commitid int64
	err := row.Scan(&commitid)
	return commitid, err
}

const insertFile = `-- name: InsertFile :exec
INSERT INTO file(projectid, path)
VALUES (?, ?)
`

type InsertFileParams struct {
	Projectid int64  `json:"projectid"`
	Path      string `json:"path"`
}

func (q *Queries) InsertFile(ctx context.Context, arg InsertFileParams) error {
	_, err := q.db.ExecContext(ctx, insertFile, arg.Projectid, arg.Path)
	return err
}

const insertFileRevision = `-- name: InsertFileRevision :exec
INSERT INTO filerevision(projectid, path, commitid, hash, changetype)
VALUES (?, ?, ?, ?, ?)
`

type InsertFileRevisionParams struct {
	Projectid  int64  `json:"projectid"`
	Path       string `json:"path"`
	Commitid   int64  `json:"commitid"`
	Hash       string `json:"hash"`
	Changetype int64  `json:"changetype"`
}

func (q *Queries) InsertFileRevision(ctx context.Context, arg InsertFileRevisionParams) error {
	_, err := q.db.ExecContext(ctx, insertFileRevision,
		arg.Projectid,
		arg.Path,
		arg.Commitid,
		arg.Hash,
		arg.Changetype,
	)
	return err
}

const insertHash = `-- name: InsertHash :exec
INSERT INTO block(hash, s3key, size)
VALUES (?, ?, ?)
`

type InsertHashParams struct {
	Hash  string `json:"hash"`
	S3key string `json:"s3key"`
	Size  int64  `json:"size"`
}

func (q *Queries) InsertHash(ctx context.Context, arg InsertHashParams) error {
	_, err := q.db.ExecContext(ctx, insertHash, arg.Hash, arg.S3key, arg.Size)
	return err
}

const insertProject = `-- name: InsertProject :one
INSERT INTO project(title, teamid)
VALUES (?, ?)
RETURNING projectid
`

type InsertProjectParams struct {
	Title  string `json:"title"`
	Teamid int64  `json:"teamid"`
}

func (q *Queries) InsertProject(ctx context.Context, arg InsertProjectParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertProject, arg.Title, arg.Teamid)
	var projectid int64
	err := row.Scan(&projectid)
	return projectid, err
}

const insertTeam = `-- name: InsertTeam :one
INSERT INTO team(name)
VALUES (?)
RETURNING teamid
`

func (q *Queries) InsertTeam(ctx context.Context, name string) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertTeam, name)
	var teamid int64
	err := row.Scan(&teamid)
	return teamid, err
}

const setTeamPermission = `-- name: SetTeamPermission :one
INSERT INTO teampermission(userid, teamid, level)
VALUES(?, ?, ?) ON CONFLICT(userid, teamid) DO UPDATE SET level=excluded.level
RETURNING userid, teamid, level
`

type SetTeamPermissionParams struct {
	Userid string `json:"userid"`
	Teamid int64  `json:"teamid"`
	Level  int64  `json:"level"`
}

func (q *Queries) SetTeamPermission(ctx context.Context, arg SetTeamPermissionParams) (Teampermission, error) {
	row := q.db.QueryRowContext(ctx, setTeamPermission, arg.Userid, arg.Teamid, arg.Level)
	var i Teampermission
	err := row.Scan(&i.Userid, &i.Teamid, &i.Level)
	return i, err
}
