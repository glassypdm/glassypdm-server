// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: pgroup.sql

package sqlcgen

import (
	"context"
)

const addMemberToPermissionGroup = `-- name: AddMemberToPermissionGroup :exec
INSERT INTO pgmembership(pgroupid, userid) VALUES($1, $2)
`

type AddMemberToPermissionGroupParams struct {
	Pgroupid int32  `json:"pgroupid"`
	Userid   string `json:"userid"`
}

func (q *Queries) AddMemberToPermissionGroup(ctx context.Context, arg AddMemberToPermissionGroupParams) error {
	_, err := q.db.Exec(ctx, addMemberToPermissionGroup, arg.Pgroupid, arg.Userid)
	return err
}

const createPermissionGroup = `-- name: CreatePermissionGroup :exec
INSERT INTO permissiongroup(teamid, name) VALUES($1, $2)
`

type CreatePermissionGroupParams struct {
	Teamid int32  `json:"teamid"`
	Name   string `json:"name"`
}

func (q *Queries) CreatePermissionGroup(ctx context.Context, arg CreatePermissionGroupParams) error {
	_, err := q.db.Exec(ctx, createPermissionGroup, arg.Teamid, arg.Name)
	return err
}

const deletePermissionGroup = `-- name: DeletePermissionGroup :exec
DELETE FROM permissiongroup WHERE pgroupid = $1
`

func (q *Queries) DeletePermissionGroup(ctx context.Context, pgroupid int32) error {
	_, err := q.db.Exec(ctx, deletePermissionGroup, pgroupid)
	return err
}

const dropPermissionGroupMapping = `-- name: DropPermissionGroupMapping :exec
DELETE FROM pgmapping WHERE pgroupid = $1
`

func (q *Queries) DropPermissionGroupMapping(ctx context.Context, pgroupid int32) error {
	_, err := q.db.Exec(ctx, dropPermissionGroupMapping, pgroupid)
	return err
}

const dropPermissionGroupMembership = `-- name: DropPermissionGroupMembership :exec
DELETE FROM pgmembership WHERE pgroupid = $1
`

func (q *Queries) DropPermissionGroupMembership(ctx context.Context, pgroupid int32) error {
	_, err := q.db.Exec(ctx, dropPermissionGroupMembership, pgroupid)
	return err
}

const findUserInPermissionGroup = `-- name: FindUserInPermissionGroup :many
SELECT pgroupid FROM pgmembership WHERE
userid = $1
`

func (q *Queries) FindUserInPermissionGroup(ctx context.Context, userid string) ([]int32, error) {
	rows, err := q.db.Query(ctx, findUserInPermissionGroup, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var pgroupid int32
		if err := rows.Scan(&pgroupid); err != nil {
			return nil, err
		}
		items = append(items, pgroupid)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPermissionGroupMapping = `-- name: GetPermissionGroupMapping :many
SELECT p.projectid, p.title FROM pgmapping pg, project p
WHERE pg.pgroupid = $1 AND pg.projectid = p.projectid
`

type GetPermissionGroupMappingRow struct {
	Projectid int32  `json:"projectid"`
	Title     string `json:"title"`
}

func (q *Queries) GetPermissionGroupMapping(ctx context.Context, pgroupid int32) ([]GetPermissionGroupMappingRow, error) {
	rows, err := q.db.Query(ctx, getPermissionGroupMapping, pgroupid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPermissionGroupMappingRow
	for rows.Next() {
		var i GetPermissionGroupMappingRow
		if err := rows.Scan(&i.Projectid, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeamFromPGroup = `-- name: GetTeamFromPGroup :one
SELECT teamid FROM permissiongroup WHERE
pgroupid = $1 LIMIT 1
`

func (q *Queries) GetTeamFromPGroup(ctx context.Context, pgroupid int32) (int32, error) {
	row := q.db.QueryRow(ctx, getTeamFromPGroup, pgroupid)
	var teamid int32
	err := row.Scan(&teamid)
	return teamid, err
}

const isUserInPermissionGroup = `-- name: IsUserInPermissionGroup :one
SELECT userid FROM pgmembership pgme, pgmapping pgma WHERE
pgme.userid = $1 AND pgma.projectid = $2 AND pgma.pgroupid = pgme.pgroupid
`

type IsUserInPermissionGroupParams struct {
	Userid    string `json:"userid"`
	Projectid int32  `json:"projectid"`
}

func (q *Queries) IsUserInPermissionGroup(ctx context.Context, arg IsUserInPermissionGroupParams) (string, error) {
	row := q.db.QueryRow(ctx, isUserInPermissionGroup, arg.Userid, arg.Projectid)
	var userid string
	err := row.Scan(&userid)
	return userid, err
}

const listPermissionGroupForTeam = `-- name: ListPermissionGroupForTeam :many
SELECT pg.pgroupid, pg.name, count(pgm.userid) as count
FROM permissiongroup pg LEFT JOIN pgmembership pgm ON pg.pgroupid = pgm.pgroupid
WHERE pg.teamid = $1 GROUP BY pg.pgroupid
`

type ListPermissionGroupForTeamRow struct {
	Pgroupid int32  `json:"pgroupid"`
	Name     string `json:"name"`
	Count    int64  `json:"count"`
}

func (q *Queries) ListPermissionGroupForTeam(ctx context.Context, teamid int32) ([]ListPermissionGroupForTeamRow, error) {
	rows, err := q.db.Query(ctx, listPermissionGroupForTeam, teamid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPermissionGroupForTeamRow
	for rows.Next() {
		var i ListPermissionGroupForTeamRow
		if err := rows.Scan(&i.Pgroupid, &i.Name, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPermissionGroupMembership = `-- name: ListPermissionGroupMembership :many
SELECT userid FROM pgmembership WHERE pgroupid = $1
`

func (q *Queries) ListPermissionGroupMembership(ctx context.Context, pgroupid int32) ([]string, error) {
	rows, err := q.db.Query(ctx, listPermissionGroupMembership, pgroupid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var userid string
		if err := rows.Scan(&userid); err != nil {
			return nil, err
		}
		items = append(items, userid)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const mapProjectToPermissionGroup = `-- name: MapProjectToPermissionGroup :exec
INSERT INTO pgmapping(pgroupid, projectid) VALUES($1, $2)
`

type MapProjectToPermissionGroupParams struct {
	Pgroupid  int32 `json:"pgroupid"`
	Projectid int32 `json:"projectid"`
}

func (q *Queries) MapProjectToPermissionGroup(ctx context.Context, arg MapProjectToPermissionGroupParams) error {
	_, err := q.db.Exec(ctx, mapProjectToPermissionGroup, arg.Pgroupid, arg.Projectid)
	return err
}

const removeMemberFromPermissionGroup = `-- name: RemoveMemberFromPermissionGroup :exec
DELETE FROM pgmembership WHERE pgroupid = $1 AND userid = $2
`

type RemoveMemberFromPermissionGroupParams struct {
	Pgroupid int32  `json:"pgroupid"`
	Userid   string `json:"userid"`
}

func (q *Queries) RemoveMemberFromPermissionGroup(ctx context.Context, arg RemoveMemberFromPermissionGroupParams) error {
	_, err := q.db.Exec(ctx, removeMemberFromPermissionGroup, arg.Pgroupid, arg.Userid)
	return err
}

const removeProjectFromPermissionGroup = `-- name: RemoveProjectFromPermissionGroup :exec
DELETE FROM pgmapping WHERE pgroupid = $1 AND projectid = $2
`

type RemoveProjectFromPermissionGroupParams struct {
	Pgroupid  int32 `json:"pgroupid"`
	Projectid int32 `json:"projectid"`
}

func (q *Queries) RemoveProjectFromPermissionGroup(ctx context.Context, arg RemoveProjectFromPermissionGroupParams) error {
	_, err := q.db.Exec(ctx, removeProjectFromPermissionGroup, arg.Pgroupid, arg.Projectid)
	return err
}
